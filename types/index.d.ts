export function jsx<T extends Type>(type: T, props?: Props<T>, key?: Key): {
    type: T;
    props: Props<T>;
    key: any;
};
export function jsxs<T extends Type>(type: T, props?: Props<T>, key?: Key): {
    type: T;
    props: Props<T>;
    key: any;
};
export function jsxDEV<T extends Type>(type: T, props?: Props<T>, key?: Key): {
    type: T;
    props: Props<T>;
    key: any;
};
export function jsxsDEV<T extends Type>(type: T, props?: Props<T>, key?: Key): {
    type: T;
    props: Props<T>;
    key: any;
};
export function Fragment(props: {
    children?: Children;
}): Children;
export function Portal(props: {
    children?: Children;
    to: ParentNode;
}): Children;
export function Try(props: {
    children?: Children;
    catch: Vnode["catch"];
}): Children;
export function createContext<T>(value: T): (({ value, children }: {
    value: T;
    children?: Children;
}) => Children) & {
    value: T;
};
export function useRef<T>(initial: T | (() => T)): Ref<T>;
export function useEffect(fn: AfterEffect, deps?: unknown[]): void;
export function useMemo<T>(fn: (...args: unknown[]) => T, deps?: unknown[]): T;
export function useState<T>(initial: T | (() => T)): State<T>;
export function useCallback<T extends (...args: any[]) => any>(fn: T): T;
export function memo<Component extends FC>(Component: Component, memo?: typeof defaultMemo): Component;
export function useContext<T extends Context<any>>(Context: T): T["value"];
export function createRoot(parentNode: ParentNode): Root;
export type Recursive<T> = T | RecursiveArray<T>;
export type RecursiveArray<T> = Recursive<T>[];
export type Children = Recursive<Def | string | number | false | null | undefined | void>;
export type FC = ((props: any) => Children) & {
    memo?: (a: Props, b: Props) => boolean;
};
export type TagName = keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap;
export type Type = TagName | FC;
export type SharedElementProps<T = unknown> = {
    children?: Children;
    ref?: Ref<T | null> | null;
    style?: Partial<CSSStyleDeclaration> | string | null;
};
export type GlobalAttributes = {
    [key: `data-${string}`]: string | null | undefined;
    "aria-atomic"?: "true" | "false" | null;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | null;
    "aria-busy"?: "true" | "false" | null;
    "aria-checked"?: "true" | "false" | "mixed" | null;
    "aria-colcount"?: string | null;
    "aria-colindex"?: string | null;
    "aria-colspan"?: string | null;
    "aria-controls"?: string | null;
    "aria-current"?: "page" | "step" | "location" | "date" | "time" | "true" | "false" | null;
    "aria-describedby"?: string | null;
    "aria-details"?: string | null;
    "aria-disabled"?: "true" | "false" | null;
    "aria-errormessage"?: string | null;
    "aria-expanded"?: "true" | "false" | null;
    "aria-haspopup"?: "dialog" | "menu" | "listbox" | "tree" | "grid" | "true" | "false" | null;
    "aria-hidden"?: "true" | "false" | null;
    "aria-invalid"?: "true" | "false" | "grammar" | "spelling" | null;
    "aria-keyshortcuts"?: string | null;
    "aria-label"?: string | null;
    "aria-labelledby"?: string | null;
    "aria-level"?: string | null;
    "aria-live"?: "off" | "polite" | "assertive" | null;
    "aria-modal"?: "true" | "false" | null;
    "aria-multiline"?: "true" | "false" | null;
    "aria-multiselectable"?: "true" | "false" | null;
    "aria-orientation"?: "horizontal" | "vertical" | null;
    "aria-owns"?: string | null;
    "aria-placeholder"?: string | null;
    "aria-posinset"?: string | null;
    "aria-pressed"?: "true" | "false" | "mixed" | null;
    "aria-readonly"?: "true" | "false" | null;
    "aria-relevant"?: string | null;
    "aria-required"?: "true" | "false" | null;
    "aria-roledescription"?: string | null;
    "aria-rowcount"?: string | null;
    "aria-rowindex"?: string | null;
    "aria-rowspan"?: string | null;
    "aria-selected"?: "true" | "false" | null;
    "aria-setsize"?: string | null;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | null;
    "aria-valuemax"?: string | null;
    "aria-valuemin"?: string | null;
    "aria-valuenow"?: string | null;
    "aria-valuetext"?: string | null;
    accesskey?: string | null;
    autocapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | null;
    autofocus?: "true" | null;
    class?: string | null;
    contenteditable?: "true" | "false" | "inherit" | null;
    dir?: "ltr" | "rtl" | "auto" | null;
    draggable?: "true" | "false" | null;
    enterkeyhint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | null;
    hidden?: "true" | null;
    id?: string | null;
    inputmode?: string | null;
    is?: string | null;
    itemid?: string | null;
    itemprop?: string | null;
    itemref?: string | null;
    itemscope?: "true" | null;
    itemtype?: string | null;
    lang?: string | null;
    nonce?: string | null;
    part?: string | null;
    role?: string | null;
    spellcheck?: "true" | "false" | null;
    style?: string | null;
    tabindex?: string | null;
    title?: string | null;
    translate?: "yes" | "no" | null;
};
export type HTMLAttributes = GlobalAttributes & {
    "accept-charset"?: string | null;
    "http-equiv"?: string | null;
    accept?: string | null;
    action?: string | null;
    allow?: string | null;
    alt?: string | null;
    async?: "true" | null;
    autocomplete?: "on" | "off" | string | null;
    autofocus?: "true" | null;
    autoplay?: "true" | null;
    capture?: "true" | null;
    charset?: "utf-8" | string | null;
    checked?: "true" | null;
    cite?: string | null;
    cols?: string | null;
    colspan?: string | null;
    content?: string | null;
    controls?: "true" | null;
    coords?: string | null;
    crossorigin?: "anonymous" | "use-credentials" | "" | null;
    datetime?: string | null;
    decoding?: "auto" | "sync" | "async" | null;
    default?: "true" | null;
    defer?: "true" | null;
    disabled?: "true" | null;
    download?: "true" | string | null;
    enctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain" | null;
    fetchpriority?: "auto" | "high" | "low" | null;
    for?: string | null;
    form?: string | null;
    formaction?: string | null;
    formenctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain" | null;
    formmethod?: "get" | "post" | "dialog" | null;
    formnovalidate?: "true" | null;
    formtarget?: "_self" | "_blank" | "_parent" | "_top" | string | null;
    headers?: string | null;
    height?: string | null;
    high?: string | null;
    href?: string | null;
    hreflang?: string | null;
    integrity?: string | null;
    ismap?: "true" | null;
    kind?: "captions" | "chapters" | "descriptions" | "metadata" | "subtitles" | string | null;
    label?: string | null;
    list?: string | null;
    loading?: "lazy" | "eager" | "auto" | null;
    loop?: "true" | null;
    low?: string | null;
    max?: string | null;
    maxlength?: string | null;
    media?: string | null;
    method?: "get" | "post" | "dialog" | string | null;
    min?: string | null;
    minlength?: string | null;
    multiple?: "true" | null;
    muted?: "true" | null;
    name?: string | null;
    nomodule?: "true" | null;
    nonce?: string | null;
    novalidate?: "true" | null;
    open?: "true" | null;
    optimum?: string | null;
    pattern?: string | null;
    placeholder?: string | null;
    playsinline?: "true" | null;
    poster?: string | null;
    preload?: "none" | "metadata" | "auto" | "" | null;
    readonly?: "true" | null;
    referrerpolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | null;
    rel?: "alternate" | "author" | "bookmark" | "canonical" | "dns-prefetch" | "external" | "help" | "icon" | "license" | "manifest" | "modulepreload" | "next" | "nofollow" | "noopener" | "noreferrer" | "opensearch" | "pingback" | "preconnect" | "prefetch" | "preload" | "prerender" | "prev" | "search" | "shortlink" | "stylesheet" | "tag" | string | null;
    required?: "true" | null;
    reversed?: "true" | null;
    rows?: string | null;
    rowspan?: string | null;
    sandbox?: "allow-downloads" | "allow-forms" | "allow-modals" | "allow-orientation-lock" | "allow-pointer-lock" | "allow-popups" | "allow-popups-to-escape-sandbox" | "allow-presentation" | "allow-same-origin" | "allow-scripts" | "allow-top-navigation" | string | null;
    scope?: "col" | "colgroup" | "row" | "rowgroup" | null;
    selected?: "true" | null;
    shape?: "rect" | "circle" | "poly" | "default" | null;
    size?: string | null;
    sizes?: string | null;
    slot?: string | null;
    span?: string | null;
    src?: string | null;
    srcdoc?: string | null;
    srclang?: string | null;
    srcset?: string | null;
    start?: string | null;
    step?: string | null;
    target?: "_self" | "_blank" | "_parent" | "_top" | string | null;
    type?: string | null;
    usemap?: string | null;
    value?: string | null;
    width?: string | null;
    wrap?: "hard" | "soft" | null;
};
export type SVGAttributes = GlobalAttributes & {
    "alignment-baseline"?: string | null;
    "clip-path"?: string | null;
    "fill-opacity"?: string | null;
    "fill-rule"?: "nonzero" | "evenodd" | null;
    "flood-color"?: string | null;
    "flood-opacity"?: string | null;
    "font-family"?: string | null;
    "font-size"?: string | null;
    "font-weight"?: string | null;
    "marker-end"?: string | null;
    "marker-mid"?: string | null;
    "marker-start"?: string | null;
    "pointer-events"?: string | null;
    "stop-color"?: string | null;
    "stop-opacity"?: string | null;
    "stroke-dasharray"?: string | null;
    "stroke-dashoffset"?: string | null;
    "stroke-linecap"?: "butt" | "round" | "square" | null;
    "stroke-linejoin"?: "miter" | "round" | "bevel" | null;
    "stroke-miterlimit"?: string | null;
    "stroke-opacity"?: string | null;
    "stroke-width"?: string | null;
    "xlink:href"?: string | null;
    clip?: string | null;
    color?: string | null;
    cursor?: string | null;
    cx?: string | null;
    cy?: string | null;
    d?: string | null;
    display?: string | null;
    fill?: string | null;
    filter?: string | null;
    font?: string | null;
    fx?: string | null;
    fy?: string | null;
    gradientTransform?: string | null;
    gradientUnits?: string | null;
    height?: string | null;
    href?: string | null;
    mask?: string | null;
    offset?: string | null;
    opacity?: string | null;
    overflow?: string | null;
    patternUnits?: string | null;
    preserveAspectRatio?: string | null;
    r?: string | null;
    rx?: string | null;
    ry?: string | null;
    stroke?: string | null;
    textAnchor?: "start" | "middle" | "end" | "inherit" | null;
    transform?: string | null;
    viewBox?: string | null;
    visibility?: string | null;
    width?: string | null;
    x?: string | null;
    x1?: string | null;
    x2?: string | null;
    xmlns?: "http://www.w3.org/2000/svg" | string | null;
    y?: string | null;
    y1?: string | null;
    y2?: string | null;
};
export type ElementAttributes<T extends Element> = T extends HTMLElement ? HTMLAttributes : T extends SVGElement ? SVGAttributes : never;
export type ElementProps<T extends Element, Shared = SharedElementProps<T>, Attributes = ElementAttributes<T>> = { [K in keyof Shared | keyof T | keyof Attributes]?: K extends keyof Shared ? Shared[K] : K extends keyof T ? T[K] extends number | boolean | ((...args: any[]) => any) | null ? T[K] : string | null : K extends keyof Attributes ? Attributes[K] : never; };
export type UnknownElementProps = SharedElementProps & {
    [K: string]: unknown;
};
export type Props<T = unknown> = T extends FC ? Parameters<T>[0] extends undefined ? {} : Parameters<T>[0] : T extends keyof HTMLElementTagNameMap ? ElementProps<HTMLElementTagNameMap[T]> : T extends keyof SVGElementTagNameMap ? ElementProps<SVGElementTagNameMap[T]> : UnknownElementProps;
export type Key = any;
export type Def = {
    type: Type;
    props: Props;
    key: Key;
};
export type Ref<T> = {
    current: T;
};
export type BeforeEffect = (() => void | unknown) | void | undefined;
export type AfterEffect = () => BeforeEffect;
export type Effect = {
    before: BeforeEffect;
    after: AfterEffect | undefined;
    deps: unknown[] | undefined;
};
export type Root = {
    render: (children: Children) => void;
    unmount: () => void;
};
export type Queues = {
    afterEffects: Vnode[];
    inserts: Vnode[];
    moves: Vnode[];
    nodeUpdates: Parameters<typeof updateNode>[];
    removes: (Element | Text)[];
    updates: Vnode[];
};
export type ParentNode = Element | ShadowRoot;
export type Vnode = {
    child: Vnode | null;
    contexts: Map<Context<any>, {
        deps: Set<Vnode>;
        value: any;
    }> | null;
    depth: number;
    effects: Effect[] | null;
    index: number;
    key: Key;
    lastNode: Element | Text | null;
    node: Element | Text | null;
    catch: (exception: any) => void;
    parent: Vnode | null;
    parentNode: ParentNode;
    prevNode: Element | Text | null;
    props: Props;
    queues: Queues;
    refs: Ref<unknown>[] | null;
    sibling: Vnode | null;
    state: 0 | 1 | 2 | 3;
    type: Type;
};
export type Context<T> = ReturnType<typeof createContext<T>>;
export type SetState<T> = <U extends T>(value: (T extends Function ? never : U) | ((current: T) => U)) => U;
export type State<T> = [T, SetState<T>];
/**
 * @param {Props} prev
 * @param {Props} next
 */
declare function defaultMemo(prev: Props, next: Props): boolean;
/**
 * @template {Element | Text} T
 * @param {T} node
 * @param {Props<T>} prev
 * @param {Props<T>} next
 */
declare function updateNode<T extends Element | Text>(node: T, prev: Props<T>, next: Props<T>): void;
export {};
